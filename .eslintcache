[{"D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\index.js":"1","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\App.js":"2","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\reportWebVitals.js":"3","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\components\\Sidebar.js":"4","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\Overview.js":"5","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\components\\SubMenu.js":"6","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\components\\SidebarData.js":"7","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\Visit.js":"8","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\SD.js":"9","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\SMP.js":"10","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\SMA.js":"11","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\Fitur.js":"12"},{"size":517,"mtime":1663037849422,"results":"13","hashOfConfig":"14"},{"size":1026,"mtime":1663214537899,"results":"15","hashOfConfig":"14"},{"size":375,"mtime":1663037849427,"results":"16","hashOfConfig":"14"},{"size":1760,"mtime":1663041939706,"results":"17","hashOfConfig":"14"},{"size":171,"mtime":1663037849424,"results":"18","hashOfConfig":"14"},{"size":1689,"mtime":1663206754269,"results":"19","hashOfConfig":"14"},{"size":3029,"mtime":1663214197879,"results":"20","hashOfConfig":"14"},{"size":2751,"mtime":1663208409070,"results":"21","hashOfConfig":"14"},{"size":5877,"mtime":1663212650530,"results":"22","hashOfConfig":"14"},{"size":5885,"mtime":1663212834560,"results":"23","hashOfConfig":"14"},{"size":5885,"mtime":1663212944079,"results":"24","hashOfConfig":"14"},{"size":6587,"mtime":1663214513342,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"moaslh",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"28"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"28"},"D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\index.js",[],["58","59"],"D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\App.js",[],"D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\reportWebVitals.js",[],"D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\components\\Sidebar.js",[],"D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\Overview.js",[],["60","61"],"D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\components\\SubMenu.js",[],"D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\components\\SidebarData.js",["62","63"],"import React from 'react';\r\nimport * as FaIcons from 'react-icons/fa';\r\nimport * as AiIcons from 'react-icons/ai';\r\nimport * as IoIcons from 'react-icons/io';\r\nimport * as RiIcons from 'react-icons/ri';\r\n\r\nexport const SidebarData = [\r\n  {\r\n    title: 'Visit',\r\n    path: '/visit',\r\n    icon: <IoIcons.IoMdPeople />\r\n  },\r\n  {\r\n    title: 'SD',\r\n    path: '/sd',\r\n    icon: <IoIcons.IoIosPaper />,\r\n    iconClosed: <RiIcons.RiArrowDownSFill />,\r\n    iconOpened: <RiIcons.RiArrowUpSFill />,\r\n\r\n    subNav: [\r\n      {\r\n        title: 'Mapel',\r\n        path: '/sd/mapel',\r\n        icon: <IoIcons.IoIosPaper />,\r\n        cName: 'sub-nav'\r\n      },\r\n      // {\r\n      //   title: 'BI',\r\n      //   path: '/sd/bi',\r\n      //   icon: <IoIcons.IoIosPaper />,\r\n      //   cName: 'sub-nav'\r\n      // },\r\n      // {\r\n      //   title: 'IPA',\r\n      //   path: '/sd/ipa',\r\n      //   icon: <IoIcons.IoIosPaper />\r\n      // }\r\n    ]\r\n  },\r\n  {\r\n    title: 'SMP',\r\n    path: '/smp',\r\n    icon: <IoIcons.IoIosPaper />,\r\n    iconClosed: <RiIcons.RiArrowDownSFill />,\r\n    iconOpened: <RiIcons.RiArrowUpSFill />,\r\n\r\n    subNav: [\r\n      {\r\n        title: 'Mapel',\r\n        path: '/smp/mapel',\r\n        icon: <IoIcons.IoIosPaper />,\r\n        cName: 'sub-nav'\r\n      },\r\n      // {\r\n      //   title: 'BI',\r\n      //   path: '/smp/bi',\r\n      //   icon: <IoIcons.IoIosPaper />,\r\n      //   cName: 'sub-nav'\r\n      // },\r\n      // {\r\n      //   title: 'IPA',\r\n      //   path: '/smp/ipa',\r\n      //   icon: <IoIcons.IoIosPaper />\r\n      // }\r\n    ]\r\n  },\r\n  {\r\n    title: 'SMA',\r\n    path: '/sma',\r\n    icon: <IoIcons.IoIosPaper />,\r\n    iconClosed: <RiIcons.RiArrowDownSFill />,\r\n    iconOpened: <RiIcons.RiArrowUpSFill />,\r\n\r\n    subNav: [\r\n      {\r\n        title: 'Mapel',\r\n        path: '/sma/mapel',\r\n        icon: <IoIcons.IoIosPaper />,\r\n        cName: 'sub-nav'\r\n      },\r\n      // {\r\n      //   title: 'BI',\r\n      //   path: '/sma/bi',\r\n      //   icon: <IoIcons.IoIosPaper />,\r\n      //   cName: 'sub-nav'\r\n      // },\r\n      // {\r\n      //   title: 'IPA',\r\n      //   path: '/sma/ipa',\r\n      //   icon: <IoIcons.IoIosPaper />\r\n      // }\r\n    ]\r\n  },\r\n  {\r\n    title: 'Fitur',\r\n    path: '/fitur',\r\n    icon: <IoIcons.IoIosPaper />,\r\n    iconClosed: <RiIcons.RiArrowDownSFill />,\r\n    iconOpened: <RiIcons.RiArrowUpSFill />,\r\n\r\n    subNav: [\r\n      {\r\n        title: 'Data',\r\n        path: '/fitur/data',\r\n        icon: <IoIcons.IoIosPaper />,\r\n        cName: 'sub-nav'\r\n      },\r\n      // {\r\n      //   title: 'Random topic',\r\n      //   path: '/fitur/random-topic',\r\n      //   icon: <IoIcons.IoIosPaper />,\r\n      //   cName: 'sub-nav'\r\n      // },\r\n      // {\r\n      //   title: 'Search',\r\n      //   path: '/fitur/search',\r\n      //   icon: <IoIcons.IoIosPaper />\r\n      // },\r\n      // {\r\n      //   title: 'FAQ',\r\n      //   path: '/fitur/faq',\r\n      //   icon: <IoIcons.IoIosPaper />\r\n      // }\r\n    ]\r\n  },\r\n  \r\n  // {\r\n  //   title: 'Support',\r\n  //   path: '/support',\r\n  //   icon: <IoIcons.IoMdHelpCircle />\r\n  // }\r\n];\r\n","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\Visit.js",["64","65"],"import React, { useState, useEffect} from 'react'\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, PointElement, Title, Tooltip, Legend } from 'chart.js'\r\nimport { Line } from 'react-chartjs-2'\r\nimport { Player, Controls } from '@lottiefiles/react-lottie-player'\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    LineElement,\r\n    PointElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend\r\n)\r\n\r\nconst Visit = () => {\r\n  const [chart, setChart] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    var baseUrl = 'http://localhost:3002'\r\n\r\n    useEffect(() => {\r\n      const fetchVisit = async () => {\r\n        await fetch(`${baseUrl}/visit-total/get`, {\r\n            method: 'GET',\r\n            // headers: {\r\n            //     'Content-Type': 'application/json'\r\n            // }\r\n        }).then((response) => {\r\n            response.json().then((json) => {\r\n                // console.log(json)\r\n                setChart(json)\r\n                setLoading(true)\r\n            })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n      }\r\n      fetchVisit()\r\n    }, [])\r\n    \r\n    // console.log(chart)\r\n\r\n    const data = {\r\n        labels: chart?.map(data => data.date),\r\n        datasets: [\r\n            {\r\n                label: 'Visit',\r\n                data: chart?.map(data => data.total_count),\r\n                borderColor: '#E74C3C',\r\n                borderWidth: 2,\r\n                fill: false,\r\n                tension: 0.1\r\n            }\r\n        ]\r\n    }\r\n    \r\n    const options = {\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n            y: {\r\n                beginAtZero: true\r\n            }\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontSize: 26\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!loading) {\r\n        return(\r\n            <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n              <Player\r\n                  autoplay\r\n                  loop\r\n                  src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n                  style={{ height: '500px', width: 'auto' }}\r\n                  >\r\n              </Player>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n              <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n                <Line \r\n                    data={data}\r\n                    height={400}\r\n                    options={options}\r\n                    style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n                />\r\n              </div>\r\n            </div>\r\n          )\r\n    }\r\n    \r\n};\r\n\r\nexport default Visit;\r\n","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\SD.js",["66"],"import React, { useState, useEffect} from 'react'\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, ArcElement, PointElement, Title, Tooltip, Legend } from 'chart.js'\r\nimport { Line, Doughnut } from 'react-chartjs-2'\r\nimport { Player, Controls } from '@lottiefiles/react-lottie-player'\r\nimport axios from 'axios'\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    LineElement,\r\n    PointElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement\r\n)\r\n\r\nexport const SD = () => {\r\n  const [mat, setMat] = useState()\r\n  const [bi, setBi] = useState()\r\n  const [ipa, setIpa] = useState()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await axios.all([\r\n                axios.get( 'http://localhost:3002/sd-mat/get'),\r\n                axios.get( 'http://localhost:3002/sd-bi/get'),\r\n                axios.get( 'http://localhost:3002/sd-ipa/get'),\r\n                \r\n              ]).then(axios.spread((...responses) => {\r\n                setMat(responses[0].data[0].count)\r\n                setBi(responses[1].data[0].count)\r\n                setIpa(responses[2].data[0].count)\r\n                setLoading(true)\r\n              }))\r\n      }\r\n      fetchData()\r\n    }, [])\r\n    \r\n    // console.log(mat , ipa , bi)\r\n\r\n    const dataDough = {\r\n        labels: ['MAT','BI', 'IPA'],\r\n        datasets: [\r\n            {\r\n              label: '# of Votes',\r\n              data: [mat, bi, ipa],\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(153, 102, 255, 0.2)',\r\n                'rgba(255, 159, 64, 0.2)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n        ]\r\n    }\r\n    \r\n    const optionsDough = {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n            labels: {\r\n                fontSize: 26\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!loading) {\r\n        return(\r\n            <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n              <Player\r\n                  autoplay\r\n                  loop\r\n                  src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n                  style={{ height: '500px', width: 'auto' }}\r\n                  >\r\n              </Player>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n              <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n                <Doughnut \r\n                    data={dataDough}\r\n                    height={400}\r\n                    options={optionsDough}\r\n                    style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n                />\r\n              </div>\r\n            </div>\r\n          )\r\n    }\r\n};\r\n\r\nexport const MapelSD = () => {\r\n\r\n  const [dailyMat, setDailyMat] = useState([])\r\n  const [dailyBi, setDailyBi] = useState([])\r\n  const [dailyIpa, setDailyIpa] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await axios.all([\r\n                axios.get( 'http://localhost:3002/daily-sd-mat/get'),\r\n                axios.get( 'http://localhost:3002/daily-sd-bi/get'),\r\n                axios.get( 'http://localhost:3002/daily-sd-ipa/get'),\r\n                \r\n              ]).then(axios.spread((...responses) => {\r\n                setDailyMat(responses[0].data)\r\n                setDailyBi(responses[1].data)\r\n                setDailyIpa(responses[2].data)\r\n                setLoading(true)\r\n              }))\r\n      }\r\n      fetchData()\r\n    }, [])\r\n  \r\n\r\n  const data = {\r\n    labels: dailyMat?.map(data => data.date),\r\n    datasets: [\r\n        {\r\n            label: 'MAT',\r\n            data: dailyMat?.map(data => data.total_count),\r\n            borderColor: '#E74C3C',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'BI',\r\n            data: dailyBi?.map(data => data.total_count),\r\n            borderColor: '#2980B9',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'IPA',\r\n            data: dailyIpa?.map(data => data.total_count),\r\n            borderColor: '#F1C40F',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n    ]\r\n}\r\n\r\nconst options = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n        y: {\r\n            beginAtZero: true\r\n        }\r\n    },\r\n    legend: {\r\n        labels: {\r\n            fontSize: 26\r\n        }\r\n    }\r\n}\r\n  \r\n\r\nif(!loading) {\r\n  return(\r\n      <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n        <Player\r\n            autoplay\r\n            loop\r\n            src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n            style={{ height: '500px', width: 'auto' }}\r\n            >\r\n        </Player>\r\n      </div>\r\n  )\r\n} else {\r\n  return (\r\n      <div>\r\n        <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n          <Line \r\n              data={data}\r\n              height={400}\r\n              options={options}\r\n              style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\n};\r\n\r\n","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\SMP.js",["67"],"import React, { useState, useEffect} from 'react'\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, ArcElement, PointElement, Title, Tooltip, Legend } from 'chart.js'\r\nimport { Line, Doughnut } from 'react-chartjs-2'\r\nimport { Player, Controls } from '@lottiefiles/react-lottie-player'\r\nimport axios from 'axios'\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    LineElement,\r\n    PointElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement\r\n)\r\n\r\nexport const SMP = () => {\r\n  const [mat, setMat] = useState()\r\n  const [bi, setBi] = useState()\r\n  const [ipa, setIpa] = useState()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await axios.all([\r\n                axios.get( 'http://localhost:3002/smp-mat/get'),\r\n                axios.get( 'http://localhost:3002/smp-bi/get'),\r\n                axios.get( 'http://localhost:3002/smp-ipa/get'),\r\n                \r\n              ]).then(axios.spread((...responses) => {\r\n                setMat(responses[0].data[0].count)\r\n                setBi(responses[1].data[0].count)\r\n                setIpa(responses[2].data[0].count)\r\n                setLoading(true)\r\n              }))\r\n      }\r\n      fetchData()\r\n    }, [])\r\n    \r\n    // console.log(mat , ipa , bi)\r\n\r\n    const dataDough = {\r\n        labels: ['MAT','BI', 'IPA'],\r\n        datasets: [\r\n            {\r\n              label: '# of Votes',\r\n              data: [mat, bi, ipa],\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(153, 102, 255, 0.2)',\r\n                'rgba(255, 159, 64, 0.2)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n        ]\r\n    }\r\n    \r\n    const optionsDough = {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n            labels: {\r\n                fontSize: 26\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!loading) {\r\n        return(\r\n            <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n              <Player\r\n                  autoplay\r\n                  loop\r\n                  src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n                  style={{ height: '500px', width: 'auto' }}\r\n                  >\r\n              </Player>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n              <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n                <Doughnut \r\n                    data={dataDough}\r\n                    height={400}\r\n                    options={optionsDough}\r\n                    style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n                />\r\n              </div>\r\n            </div>\r\n          )\r\n    }\r\n};\r\n\r\nexport const MapelSMP = () => {\r\n\r\n  const [dailyMat, setDailyMat] = useState([])\r\n  const [dailyBi, setDailyBi] = useState([])\r\n  const [dailyIpa, setDailyIpa] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await axios.all([\r\n                axios.get( 'http://localhost:3002/daily-smp-mat/get'),\r\n                axios.get( 'http://localhost:3002/daily-smp-bi/get'),\r\n                axios.get( 'http://localhost:3002/daily-smp-ipa/get'),\r\n                \r\n              ]).then(axios.spread((...responses) => {\r\n                setDailyMat(responses[0].data)\r\n                setDailyBi(responses[1].data)\r\n                setDailyIpa(responses[2].data)\r\n                setLoading(true)\r\n              }))\r\n      }\r\n      fetchData()\r\n    }, [])\r\n  \r\n\r\n  const data = {\r\n    labels: dailyMat?.map(data => data.date),\r\n    datasets: [\r\n        {\r\n            label: 'MAT',\r\n            data: dailyMat?.map(data => data.total_count),\r\n            borderColor: '#E74C3C',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'BI',\r\n            data: dailyBi?.map(data => data.total_count),\r\n            borderColor: '#2980B9',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'IPA',\r\n            data: dailyIpa?.map(data => data.total_count),\r\n            borderColor: '#F1C40F',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n    ]\r\n}\r\n\r\nconst options = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n        y: {\r\n            beginAtZero: true\r\n        }\r\n    },\r\n    legend: {\r\n        labels: {\r\n            fontSize: 26\r\n        }\r\n    }\r\n}\r\n  \r\n\r\nif(!loading) {\r\n  return(\r\n      <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n        <Player\r\n            autoplay\r\n            loop\r\n            src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n            style={{ height: '500px', width: 'auto' }}\r\n            >\r\n        </Player>\r\n      </div>\r\n  )\r\n} else {\r\n  return (\r\n      <div>\r\n        <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n          <Line \r\n              data={data}\r\n              height={400}\r\n              options={options}\r\n              style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\n};\r\n\r\n","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\SMA.js",["68"],"import React, { useState, useEffect} from 'react'\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, ArcElement, PointElement, Title, Tooltip, Legend } from 'chart.js'\r\nimport { Line, Doughnut } from 'react-chartjs-2'\r\nimport { Player, Controls } from '@lottiefiles/react-lottie-player'\r\nimport axios from 'axios'\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    LineElement,\r\n    PointElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement\r\n)\r\n\r\nexport const SMA = () => {\r\n  const [mat, setMat] = useState()\r\n  const [bi, setBi] = useState()\r\n  const [ipa, setIpa] = useState()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await axios.all([\r\n                axios.get( 'http://localhost:3002/sma-mat/get'),\r\n                axios.get( 'http://localhost:3002/sma-bi/get'),\r\n                axios.get( 'http://localhost:3002/sma-ipa/get'),\r\n                \r\n              ]).then(axios.spread((...responses) => {\r\n                setMat(responses[0].data[0].count)\r\n                setBi(responses[1].data[0].count)\r\n                setIpa(responses[2].data[0].count)\r\n                setLoading(true)\r\n              }))\r\n      }\r\n      fetchData()\r\n    }, [])\r\n    \r\n    // console.log(mat , ipa , bi)\r\n\r\n    const dataDough = {\r\n        labels: ['MAT','BI', 'IPA'],\r\n        datasets: [\r\n            {\r\n              label: '# of Votes',\r\n              data: [mat, bi, ipa],\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(153, 102, 255, 0.2)',\r\n                'rgba(255, 159, 64, 0.2)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n        ]\r\n    }\r\n    \r\n    const optionsDough = {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n            labels: {\r\n                fontSize: 26\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!loading) {\r\n        return(\r\n            <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n              <Player\r\n                  autoplay\r\n                  loop\r\n                  src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n                  style={{ height: '500px', width: 'auto' }}\r\n                  >\r\n              </Player>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n              <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n                <Doughnut \r\n                    data={dataDough}\r\n                    height={400}\r\n                    options={optionsDough}\r\n                    style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n                />\r\n              </div>\r\n            </div>\r\n          )\r\n    }\r\n};\r\n\r\nexport const MapelSMA = () => {\r\n\r\n  const [dailyMat, setDailyMat] = useState([])\r\n  const [dailyBi, setDailyBi] = useState([])\r\n  const [dailyIpa, setDailyIpa] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await axios.all([\r\n                axios.get( 'http://localhost:3002/daily-sma-mat/get'),\r\n                axios.get( 'http://localhost:3002/daily-sma-bi/get'),\r\n                axios.get( 'http://localhost:3002/daily-sma-ipa/get'),\r\n                \r\n              ]).then(axios.spread((...responses) => {\r\n                setDailyMat(responses[0].data)\r\n                setDailyBi(responses[1].data)\r\n                setDailyIpa(responses[2].data)\r\n                setLoading(true)\r\n              }))\r\n      }\r\n      fetchData()\r\n    }, [])\r\n  \r\n\r\n  const data = {\r\n    labels: dailyMat?.map(data => data.date),\r\n    datasets: [\r\n        {\r\n            label: 'MAT',\r\n            data: dailyMat?.map(data => data.total_count),\r\n            borderColor: '#E74C3C',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'BI',\r\n            data: dailyBi?.map(data => data.total_count),\r\n            borderColor: '#2980B9',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'IPA',\r\n            data: dailyIpa?.map(data => data.total_count),\r\n            borderColor: '#F1C40F',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n    ]\r\n}\r\n\r\nconst options = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n        y: {\r\n            beginAtZero: true\r\n        }\r\n    },\r\n    legend: {\r\n        labels: {\r\n            fontSize: 26\r\n        }\r\n    }\r\n}\r\n  \r\n\r\nif(!loading) {\r\n  return(\r\n      <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n        <Player\r\n            autoplay\r\n            loop\r\n            src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n            style={{ height: '500px', width: 'auto' }}\r\n            >\r\n        </Player>\r\n      </div>\r\n  )\r\n} else {\r\n  return (\r\n      <div>\r\n        <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n          <Line \r\n              data={data}\r\n              height={400}\r\n              options={options}\r\n              style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\n};\r\n\r\n","D:\\Project\\ReactJS\\MejaKita - Chatbot\\chart_dashboard\\src\\pages\\Fitur.js",["69"],"import React, { useState, useEffect} from 'react'\r\nimport { Chart as ChartJS, LineElement, CategoryScale, LinearScale, ArcElement, PointElement, Title, Tooltip, Legend } from 'chart.js'\r\nimport { Line, Doughnut } from 'react-chartjs-2'\r\nimport { Player, Controls } from '@lottiefiles/react-lottie-player'\r\nimport axios from 'axios'\r\n\r\nChartJS.register(\r\n    CategoryScale,\r\n    LinearScale,\r\n    LineElement,\r\n    PointElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    ArcElement\r\n)\r\n\r\nexport const Fitur = () => {\r\n  const [faq, setFaq] = useState()\r\n  const [search, setSearch] = useState()\r\n  const [randtop, setRandtop] = useState()\r\n  const [pilmat, setPilmat] = useState()\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await axios.all([\r\n                axios.get( 'http://localhost:3002/f-faq/get'),\r\n                axios.get( 'http://localhost:3002/f-search/get'),\r\n                axios.get( 'http://localhost:3002/f-randtop/get'),\r\n                axios.get( 'http://localhost:3002/f-pilmat/get'),\r\n                \r\n              ]).then(axios.spread((...responses) => {\r\n                setFaq(responses[0].data[0].count)\r\n                setSearch(responses[1].data[0].count)\r\n                setRandtop(responses[2].data[0].count)\r\n                setPilmat(responses[3].data[0].count)\r\n                setLoading(true)\r\n              }))\r\n      }\r\n      fetchData()\r\n    }, [])\r\n    \r\n    // console.log(mat , ipa , bi)\r\n\r\n    const dataDough = {\r\n        labels: ['FAQ','Search', 'Random Topic', 'Pilihan Materi'],\r\n        datasets: [\r\n            {\r\n              label: '# of Votes',\r\n              data: [faq, search, randtop, pilmat],\r\n              backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(153, 102, 255, 0.2)',\r\n                'rgba(255, 159, 64, 0.2)',\r\n              ],\r\n              borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(153, 102, 255, 1)',\r\n                'rgba(255, 159, 64, 1)',\r\n              ],\r\n              borderWidth: 1,\r\n            },\r\n        ]\r\n    }\r\n    \r\n    const optionsDough = {\r\n        maintainAspectRatio: false,\r\n        legend: {\r\n            labels: {\r\n                fontSize: 26\r\n            }\r\n        }\r\n    }\r\n\r\n    if(!loading) {\r\n        return(\r\n            <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n              <Player\r\n                  autoplay\r\n                  loop\r\n                  src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n                  style={{ height: '500px', width: 'auto' }}\r\n                  >\r\n              </Player>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <div>\r\n              <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n                <Doughnut \r\n                    data={dataDough}\r\n                    height={400}\r\n                    options={optionsDough}\r\n                    style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n                />\r\n              </div>\r\n            </div>\r\n          )\r\n    }\r\n};\r\n\r\nexport const Data = () => {\r\n\r\n  const [dailyFaq, setDailyFaq] = useState([])\r\n  const [dailySearch, setDailySearch] = useState([])\r\n  const [dailyRandtop, setDailyRandtop] = useState([])\r\n  const [dailyPilmat, setDailyPilmat] = useState([])\r\n  const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        await axios.all([\r\n                axios.get( 'http://localhost:3002/daily-f-faq/get'),\r\n                axios.get( 'http://localhost:3002/daily-f-search/get'),\r\n                axios.get( 'http://localhost:3002/daily-f-randtop/get'),\r\n                axios.get( 'http://localhost:3002/daily-f-pilmat/get'),\r\n                \r\n              ]).then(axios.spread((...responses) => {\r\n                setDailyFaq(responses[0].data)\r\n                setDailySearch(responses[1].data)\r\n                setDailyRandtop(responses[2].data)\r\n                setDailyPilmat(responses[3].data)\r\n                setLoading(true)\r\n              }))\r\n      }\r\n      fetchData()\r\n    }, [])\r\n  \r\n\r\n  const data = {\r\n    labels: dailyFaq?.map(data => data.date),\r\n    datasets: [\r\n        {\r\n            label: 'FAQ',\r\n            data: dailyFaq?.map(data => data.total_count),\r\n            borderColor: '#E74C3C',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'Search',\r\n            data: dailySearch?.map(data => data.total_count),\r\n            borderColor: '#2980B9',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'Random Topic',\r\n            data: dailyRandtop?.map(data => data.total_count),\r\n            borderColor: '#F1C40F',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n        {\r\n            label: 'Pilihan Materi',\r\n            data: dailyPilmat?.map(data => data.total_count),\r\n            borderColor: '#27AE60',\r\n            borderWidth: 2,\r\n            fill: false,\r\n            tension: 0.1\r\n        },\r\n    ]\r\n}\r\n\r\nconst options = {\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n        y: {\r\n            beginAtZero: true\r\n        }\r\n    },\r\n    legend: {\r\n        labels: {\r\n            fontSize: 26\r\n        }\r\n    }\r\n}\r\n  \r\n\r\nif(!loading) {\r\n  return(\r\n      <div style={{ alignItems: 'center', justifyContent: 'center' }}>\r\n        <Player\r\n            autoplay\r\n            loop\r\n            src=\"https://assets7.lottiefiles.com/packages/lf20_yQz03Y.json\"\r\n            style={{ height: '500px', width: 'auto' }}\r\n            >\r\n        </Player>\r\n      </div>\r\n  )\r\n} else {\r\n  return (\r\n      <div>\r\n        <div style={{ padding: '10px', margin: '40px 20px', alignItems: 'center' }}>\r\n          <Line \r\n              data={data}\r\n              height={400}\r\n              options={options}\r\n              style={{borderStyle: 'solid',borderColor: '#2C3E50', borderWidth: '0.1px', padding: '10px', borderRadius: '15px'}}\r\n          />\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\n};\r\n\r\n",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"70","replacedBy":"74"},{"ruleId":"72","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":2,"column":13,"nodeType":"78","messageId":"79","endLine":2,"endColumn":20},{"ruleId":"76","severity":1,"message":"80","line":3,"column":13,"nodeType":"78","messageId":"79","endLine":3,"endColumn":20},{"ruleId":"76","severity":1,"message":"81","line":4,"column":18,"nodeType":"78","messageId":"79","endLine":4,"endColumn":26},{"ruleId":"82","severity":1,"message":"83","line":40,"column":8,"nodeType":"84","endLine":40,"endColumn":10,"suggestions":"85"},{"ruleId":"76","severity":1,"message":"81","line":4,"column":18,"nodeType":"78","messageId":"79","endLine":4,"endColumn":26},{"ruleId":"76","severity":1,"message":"81","line":4,"column":18,"nodeType":"78","messageId":"79","endLine":4,"endColumn":26},{"ruleId":"76","severity":1,"message":"81","line":4,"column":18,"nodeType":"78","messageId":"79","endLine":4,"endColumn":26},{"ruleId":"76","severity":1,"message":"81","line":4,"column":18,"nodeType":"78","messageId":"79","endLine":4,"endColumn":26},"no-native-reassign",["86"],"no-negated-in-lhs",["87"],["86"],["87"],"no-unused-vars","'FaIcons' is defined but never used.","Identifier","unusedVar","'AiIcons' is defined but never used.","'Controls' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'baseUrl'. Either include it or remove the dependency array.","ArrayExpression",["88"],"no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},"Update the dependencies array to be: [baseUrl]",{"range":"91","text":"92"},[1136,1138],"[baseUrl]"]